import cv2
import imutils
import numpy as np
import torch


model = torch.load('eye_detection_model.pth')

def detect_blind_eye(frame):
    # Preprocess frame for eye detection
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    gray = cv2.GaussianBlur(gray, (7, 7), 0)

    # Detect eyes using Haar cascade classifier
    eye_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_eye.xml')
    eyes = eye_cascade.detectMultiScale(gray, scaleFactor=1.1, minNeighbors=5, minSize=(30, 30))

    
    if len(eyes) == 0:
        return "Blind eye detected"
    else:
        # Iterate through detected eyes
        for (ex, ey, ew, eh) in eyes:
            eye_roi = frame[ey:ey+eh, ex:ex+ew]
            # Preprocess eye region for neural network input
            eye_roi = cv2.resize(eye_roi, (224, 224))
            eye_roi = eye_roi.astype("float") / 255.0
            eye_roi = np.transpose(eye_roi, (2, 0, 1))
            eye_roi = np.expand_dims(eye_roi, axis=0)

            # Perform prediction using the pre-trained model
            with torch.no_grad():
                output = model(torch.tensor(eye_roi).float())
                _, predicted = torch.max(output.data, 1)

            # 0 indicates closed eye
            if predicted.item() == 0:
                return "Blind eye detected"
    
    return "No blind eye detected"

# Capture video from webcam
video_capture = cv2.VideoCapture(0)

while True:
    ret, frame = video_capture.read()

    
    frame = cv2.flip(frame, 1)

    
    frame = imutils.resize(frame, width=800)

    
    result = detect_blind_eye(frame)

    
    cv2.putText(frame, result, (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 255, 0), 2)
    cv2.imshow('Blind Eye Detection', frame)

    # Break loop if 'q' is pressed
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Release video capture and close all windows
video_capture.release()
cv2.destroyAllWindows()
